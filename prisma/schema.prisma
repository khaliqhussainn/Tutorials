// Fixed schema.prisma - Removed @constraint attribute
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Profile fields
  bio      String? @db.Text
  location String?
  website  String?
  timezone String? @default("UTC")
  language String? @default("en")

  // Relations
  accounts        Account[]
  sessions        Session[]
  enrollments     Enrollment[]
  videoProgress   VideoProgress[]
  videoNotes      VideoNote[]
  quizAttempts    QuizAttempt[]
  favoriteCourses FavoriteCourse[]
  courseReviews   CourseReview[]
  preferences     UserPreferences?
  notifications   Notification[]
  activities      UserActivity[]
  streaks         DailyStreak[]
  testAnswers     UserTestAnswer[]
  aiInteractions      AIInteraction[]
 learningSessions    LearningSession[]
 learningProfile     UserLearningProfile?

  // NEW: Q&A and Announcements
  questions     CourseQuestion[]
  answers       CourseAnswer[]
  announcements CourseAnnouncement[]
  questionVotes QuestionVote[]
  answerVotes   AnswerVote[]
  reviewVotes   ReviewVote[]

  @@map("users")
}

model UserPreferences {
  id                    String   @id @default(cuid())
  userId                String   @unique
  emailNotifications    Boolean  @default(true)
  pushNotifications     Boolean  @default(false)
  weeklyDigest          Boolean  @default(true)
  courseRecommendations Boolean  @default(true)
  theme                 String   @default("system")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Notification {
  id          String           @id @default(cuid())
  userId      String
  title       String
  message     String
  type        NotificationType @default(INFO)
  read        Boolean          @default(false)
  actionUrl   String?
  actionLabel String?
  metadata    Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, read])
  @@map("notifications")
}

model UserActivity {
  id          String       @id @default(cuid())
  userId      String
  type        ActivityType
  title       String
  description String?      @db.Text
  metadata    Json?
  createdAt   DateTime     @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activities")
}

model DailyStreak {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  count     Int      @default(1)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("daily_streaks")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  USER
  ADMIN
  INSTRUCTOR
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum NotificationType {
  SUCCESS
  INFO
  WARNING
  ERROR
}

enum ActivityType {
  ENROLLMENT
  VIDEO_COMPLETED
  COURSE_COMPLETED
  QUIZ_PASSED
  COURSE_FAVORITED
  PROFILE_UPDATED
  STREAK_MILESTONE
  TRANSCRIPT_GENERATED
}

enum TranscriptStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model Course {
  id          String  @id @default(cuid())
  title       String
  description String  @db.Text
  thumbnail   String?
  category    String
  level       Level
  price       Float   @default(0)
  isFree      Boolean @default(true)
  isPublished Boolean @default(false)
  isFeatured  Boolean @default(false)
  rating      Float   @default(4.8)

  duration      Int?     @map("duration")
  prerequisites String[] @map("prerequisites")
  tags          String[] @map("tags")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  sections    CourseSection[]
  videos      Video[]
  enrollments Enrollment[]
  favoritedBy FavoriteCourse[]
  reviews     CourseReview[]

  // NEW: Q&A and Announcements
  questions     CourseQuestion[]
  announcements CourseAnnouncement[]

  @@map("courses")
}

model FavoriteCourse {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  courseId  String   @map("course_id")
  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("favorite_courses")
}

model CourseSection {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int
  courseId    String   @map("course_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  course Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  videos Video[]

  @@unique([courseId, order])
  @@map("course_sections")
}

// NEW: Course Questions (Q&A)
model CourseQuestion {
  id         String   @id @default(cuid())
  courseId   String   @map("course_id")
  userId     String   @map("user_id")
  title      String
  content    String   @db.Text
  isAnswered Boolean  @default(false) @map("is_answered")
  isPinned   Boolean  @default(false) @map("is_pinned")
  upvotes    Int      @default(0)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  course  Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers CourseAnswer[]
  votes   QuestionVote[]

  @@index([courseId, createdAt])
  @@map("course_questions")
}

// NEW: Course Answers
model CourseAnswer {
  id         String   @id @default(cuid())
  questionId String   @map("question_id")
  userId     String   @map("user_id")
  content    String   @db.Text
  isCorrect  Boolean  @default(false) @map("is_correct")
  upvotes    Int      @default(0)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  question CourseQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes    AnswerVote[]

  @@index([questionId, createdAt])
  @@map("course_answers")
}

// NEW: Question Votes
model QuestionVote {
  id         String   @id @default(cuid())
  questionId String   @map("question_id")
  userId     String   @map("user_id")
  isUpvote   Boolean  @map("is_upvote")
  createdAt  DateTime @default(now()) @map("created_at")

  question CourseQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([questionId, userId])
  @@map("question_votes")
}

// NEW: Answer Votes
model AnswerVote {
  id        String   @id @default(cuid())
  answerId  String   @map("answer_id")
  userId    String   @map("user_id")
  isUpvote  Boolean  @map("is_upvote")
  createdAt DateTime @default(now()) @map("created_at")

  answer CourseAnswer @relation(fields: [answerId], references: [id], onDelete: Cascade)
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([answerId, userId])
  @@map("answer_votes")
}

// NEW: Course Announcements
model CourseAnnouncement {
  id          String   @id @default(cuid())
  courseId    String   @map("course_id")
  authorId    String   @map("author_id")
  title       String
  content     String   @db.Text
  isPinned    Boolean  @default(false) @map("is_pinned")
  isPublished Boolean  @default(true) @map("is_published")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  author User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([courseId, createdAt])
  @@index([courseId, isPinned])
  @@map("course_announcements")
}

// Enhanced existing CourseReview model
model CourseReview {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  courseId     String   @map("course_id")
  rating       Int // Removed @constraint - will validate in app logic instead
  title        String?
  comment      String?  @db.Text
  isPublic     Boolean  @default(true) @map("is_public")
  isVerified   Boolean  @default(false) @map("is_verified")
  helpfulCount Int      @default(0) @map("helpful_count")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  votes  ReviewVote[]

  @@unique([userId, courseId])
  @@index([courseId, rating])
  @@map("course_reviews")
}

// NEW: Review Votes (helpful/not helpful)
model ReviewVote {
  id        String   @id @default(cuid())
  reviewId  String   @map("review_id")
  userId    String   @map("user_id")
  isHelpful Boolean  @map("is_helpful")
  createdAt DateTime @default(now()) @map("created_at")

  review CourseReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reviewId, userId])
  @@map("review_votes")
}

model Video {
  id          String  @id @default(cuid())
  title       String
  description String?
  videoUrl    String  @map("video_url")
  duration    Int?
  order       Int
  courseId    String  @map("course_id")
  sectionId   String? @map("section_id")

  thumbnail    String?
  downloadable Boolean @default(false)
  aiPrompt     String? @map("ai_prompt") @db.Text

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  course       Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  section      CourseSection?  @relation(fields: [sectionId], references: [id], onDelete: SetNull)
  tests        Test[]
  transcript   Transcript?
  progress     VideoProgress[]
  notes        VideoNote[]
  quizAttempts QuizAttempt[]
  aiInteractions      AIInteraction[]
  learningSessions    LearningSession[]

  @@unique([courseId, order])
  @@map("videos")
}

model Transcript {
  id          String           @id @default(cuid())
  videoId     String           @unique @map("video_id")
  content     String           @db.Text
  language    String           @default("en")
  segments    Json?
  status      TranscriptStatus @default(PENDING)
  error       String?
  confidence  Float?
  provider    String?
  generatedAt DateTime?        @map("generated_at")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")

  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("transcripts")
}

model Test {
  id          String   @id @default(cuid())
  videoId     String   @map("video_id")
  question    String   @db.Text
  options     String[]
  correct     Int
  explanation String?  @db.Text
  difficulty  String   @default("medium")
  points      Int      @default(10)
  order       Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  video   Video            @relation(fields: [videoId], references: [id], onDelete: Cascade)
  answers UserTestAnswer[]

  @@map("tests")
}

model UserTestAnswer {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  testId    String   @map("test_id")
  answer    Int
  isCorrect Boolean  @map("is_correct")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  test Test @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@unique([userId, testId])
  @@map("user_test_answers")
}

model Enrollment {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  courseId    String    @map("course_id")
  progress    Float     @default(0)
  enrolledAt  DateTime  @default(now()) @map("enrolled_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  completedAt DateTime? @map("completed_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

model VideoProgress {
  id           String    @id @default(cuid())
  userId       String    @map("user_id")
  videoId      String    @map("video_id")
  completed    Boolean   @default(false)
  completedAt  DateTime? @map("completed_at")
  watchTime    Int       @default(0)
  lastPosition Int       @default(0) @map("last_position")
  testPassed   Boolean   @default(false) @map("test_passed")
  testPassedAt DateTime? @map("test_passed_at")
  testScore    Int       @default(0) @map("test_score")
  testAttempts Int       @default(0) @map("test_attempts")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@map("video_progress")
}

model VideoNote {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  videoId   String   @map("video_id")
  content   String   @db.Text
  timestamp Int?
  isPrivate Boolean  @default(true) @map("is_private")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("video_notes")
}

model QuizAttempt {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  videoId     String   @map("video_id")
  answers     String   @db.Text
  score       Int
  passed      Boolean
  timeSpent   Int      @default(0) @map("time_spent")
  completedAt DateTime @default(now()) @map("completed_at")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("quiz_attempts")
}


model AIInteraction {
  id          String   @id @default(cuid())
  userId      String
  videoId     String
  type        String   // 'question', 'explanation', 'summary', etc.
  query       String
  response    String   @db.Text
  satisfaction Int?    // 1-5 rating
  timestamp   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video       Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  
  @@map("ai_interactions")
}

model LearningSession {
  id               String   @id @default(cuid())
  userId           String
  videoId          String
  startTime        DateTime
  endTime          DateTime?
  interactionCount Int      @default(0)
  comprehensionScore Int?
  engagementLevel  String   @default("medium") // 'low', 'medium', 'high'
  
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video            Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  
  @@map("learning_sessions")
}

model UserLearningProfile {
  id                   String   @id @default(cuid())
  userId               String   @unique
  preferredDifficulty  String   @default("medium")
  learningStyle        String   @default("visual") // 'visual', 'auditory', 'kinesthetic'
  preferredPace        String   @default("normal") // 'slow', 'normal', 'fast'
  strongSubjects       String[] // Array of categories
  weakSubjects         String[] // Array of categories
  avgComprehensionScore Float   @default(0)
  totalAIInteractions  Int      @default(0)
  lastActive          DateTime @default(now())
  
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_learning_profiles")
}
