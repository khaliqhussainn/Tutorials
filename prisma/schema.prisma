// schema.prisma - ENHANCED VERSION with favorites and progress tracking
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  role            Role      @default(USER)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  accounts        Account[]
  sessions        Session[]
  enrollments     Enrollment[]
  videoProgress   VideoProgress[]
  videoNotes      VideoNote[]
  quizAttempts    QuizAttempt[]
  favoriteCourses FavoriteCourse[]

  @@map("User")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationToken")
}

enum Role {
  USER
  ADMIN
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  thumbnail   String?
  category    String
  level       Level
  price       Float    @default(0) // Free courses have price 0
  isFree      Boolean  @default(true)
  isPublished Boolean  @default(false)
  isFeatured  Boolean  @default(false)
  rating      Float    @default(4.8)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sections       CourseSection[]
  videos         Video[]
  enrollments    Enrollment[]
  favoritedBy    FavoriteCourse[]

  @@map("Course")
}

model FavoriteCourse {
  id       String @id @default(cuid())
  userId   String
  courseId String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("FavoriteCourse")
}

model CourseSection {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  videos Video[]

  @@unique([courseId, order])
  @@map("CourseSection")
}

model Video {
  id          String   @id @default(cuid())
  title       String
  description String?
  videoUrl    String
  duration    Int?     // in seconds
  order       Int
  courseId    String
  sectionId   String?  // nullable for legacy videos
  aiPrompt    String?  // for AI test generation
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course        Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  section       CourseSection?  @relation(fields: [sectionId], references: [id], onDelete: SetNull)
  tests         Test[]
  progress      VideoProgress[]
  notes         VideoNote[]
  quizAttempts  QuizAttempt[]

  @@unique([courseId, order])
  @@map("Video")
}

model Test {
  id          String   @id @default(cuid())
  videoId     String
  question    String
  options     String[] // Array of answer options
  correct     Int      // Index of correct answer (0-based)
  explanation String?  // Optional explanation for the answer
  difficulty  String   @default("medium") // easy, medium, hard
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("Test")
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  progress   Float    @default(0) // 0-100 percentage
  enrolledAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("Enrollment")
}

model VideoProgress {
  id            String    @id @default(cuid())
  userId        String
  videoId       String
  completed     Boolean   @default(false)
  completedAt   DateTime?
  watchTime     Int       @default(0) // in seconds
  testPassed    Boolean   @default(false)
  testPassedAt  DateTime?
  testScore     Int       @default(0) // percentage 0-100
  testAttempts  Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@map("VideoProgress")
}

model VideoNote {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@map("VideoNote")
}

model QuizAttempt {
  id          String   @id @default(cuid())
  userId      String
  videoId     String
  answers     String   @db.Text // JSON string of user answers
  score       Int      // percentage 0-100
  passed      Boolean
  timeSpent   Int      @default(0) // in seconds
  completedAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("QuizAttempt")
}